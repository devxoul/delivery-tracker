name: CD
on:
  push:
    branches:
      - main

  workflow_dispatch:
    inputs:
      sha:
        description: '배포할 커밋 SHA (7자)'
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    defaults:
      run:
        working-directory: packages/apiserver
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ACTIONS_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ACTIONS_AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Pull Docker Cache
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login docker.pkg.github.com -u $GITHUB_ACTOR --password-stdin
          docker pull docker.pkg.github.com/$GITHUB_REPOSITORY/buildcache || true

      - name: Build Docker Image
        run: docker build -t delivery-tracker --cache-from=docker.pkg.github.com/$GITHUB_REPOSITORY/buildcache --build-arg BUILDKIT_INLINE_CACHE=1 .

      - name: Push Docker Cache
        run: |
          docker tag delivery-tracker docker.pkg.github.com/$GITHUB_REPOSITORY/buildcache
          docker push docker.pkg.github.com/$GITHUB_REPOSITORY/buildcache

      - name: Logout from GitHub Packages
        if: always()
        run: docker logout docker.pkg.github.com

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Push Docker Image
        run: |
          docker tag delivery-tracker $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker tag delivery-tracker $ECR_REGISTRY/$ECR_REPOSITORY:${GITHUB_SHA::7}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${GITHUB_SHA::7}
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: delivery-tracker

      - name: Logout from ECR
        if: always()
        run: docker logout ${{ steps.login-ecr.outputs.registry }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: always()
    defaults:
      run:
        working-directory: packages/infra
    env:
      TF_INPUT: 0
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ACTIONS_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ACTIONS_AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TERRAFORM_API_TOKEN }}

      - name: Prepare Terraform Metadata (prod)
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "TF_WORKSPACE=prod" >> $GITHUB_ENV
          echo "TF_VAR_sha=${{ github.event.inputs.sha }}" >> $GITHUB_ENV

      - name: Prepare Terraform Metadata (dev)
        if: github.event_name == 'push'
        run: |
          echo "TF_WORKSPACE=dev" >> $GITHUB_ENV
          echo "TF_VAR_sha=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Terraform Init
        run: terraform init

      - name: Terraform Pull State
        run: terraform state pull

      - name: Terraform Plan
        run: terraform plan

      - name: Terraform Apply
        run: terraform apply -auto-approve
